//
//  CyanifyOperation.swift
//  Button
//
//  Created by ReasonAmu on 3/23/17.
//  Copyright ¬© 2017 RevolutionSport. All rights reserved.
//

import AVFoundation
import Dispatch

enum CyanifyError : Error {
    case noMediaData
}

class CyanifyOperation : Operation {
    
    
    
    //MARK: Types
    enum Result {
        case success
        case cancellation
        case failure(Error)
    }
    
    //MARK: Properties
    override var isExecuting: Bool {
        return result == nil
    }
    
    override var isFinished: Bool {
        return result != nil
    }
    
    var result : Result? {
        
        willSet {
            willChangeValue(forKey: "isExecuting")
            willChangeValue(forKey: "isFinished")
        }
        
        didSet {
            didChangeValue(forKey: "isExecuting")
            didChangeValue(forKey: "isFinished")
        }
    }
    
    private let asset: AVAsset // khai bao asset
    private let outputURL : URL! // url dau ra
    private var sampleTransferError : Error?
    
    
    //MARK: Khoi tao
    init(sourceURL : URL , outputURL : URL) {
        asset = AVAsset(url: sourceURL) // init AVAsset
        self.outputURL = outputURL
    }
    
    override var isAsynchronous: Bool {
        return true
    }
    
    
    //Moi 1 lan start phai goi finish 1 lan
    override func start() {
        guard  !isCancelled  else {
            finish(result: .cancellation)
            return
        }
        
        
        // t·∫£i asset properties ·ªü ch·∫ø ƒë·ªô n·ªÅn, ƒë·ªÉ tr√°nh ng∆∞·ªùi d√πng g·ªçi b·∫±ng I/0 ƒë·ªìng b·ªô
        asset.loadValuesAsynchronously(forKeys: ["tracks"]) {
            guard !self.isCancelled else {
                self.finish(result: .cancellation)
                return
            }
            
            // T·∫•t c·∫£ ƒë∆∞·ª£c kh·ªüi t·∫°o ·ªü kh·ªëi l·ªánh b√™n d∆∞·ªõi, eg : k c√≥ l·ªói n√†o x·∫£y ra
            let assetReader: AVAssetReader
            let assetWriter : AVAssetWriter
            let videoReaderOutputsAndWriterInputs : [ReaderOutputAndWriterInput]
            let passthroughReaderOutputsAndWriterInputs : [ReaderOutputAndWriterInput] // pass qua
            
            do {
                // ƒê·∫£m b·∫£o c√°c asset (t·ªáp tin ) t·∫£i th√†nh c√¥ng.
                
                var trackLoadingError : NSError?
                guard self.asset.statusOfValue(forKey: "tracks", error: &trackLoadingError) == .loaded else {
                    throw trackLoadingError!
                }
                let tracks = self.asset.tracks
                
                // Kh·ªüi t·∫°o reader / writer
                assetReader = try AVAssetReader(asset: self.asset)
                assetWriter = try AVAssetWriter(url: self.outputURL, fileType: AVFileTypeQuickTimeMovie)
                
                let (videoReaderOutputs, passthroughReaderOutputs)  = try self.makeReaderOutputsForTracks(tracks: tracks, availableMediaTypes: assetWriter.availableMediaTypes)
                
                videoReaderOutputsAndWriterInputs = try self.makeVideoWriterInputsForVideoReaderOutputs(videoReaderOutputs: videoReaderOutputs)
                passthroughReaderOutputsAndWriterInputs = try self.makePassthroughWriterInputsForPassthroughReaderOutputs(passthroughReaderOutputs: passthroughReaderOutputs)
                
                // Hook everything up.
                
                for (readerOutput, writerInput) in videoReaderOutputsAndWriterInputs {
                    assetReader.add(readerOutput)
                    assetWriter.add(writerInput)
                }
                
                for (readerOutput, writerInput) in passthroughReaderOutputsAndWriterInputs {
                    assetReader.add(readerOutput)
                    assetWriter.add(writerInput)
                }
                
                /*
                 Remove file if necessary. AVAssetWriter will not overwrite
                 an existing file.
                 Xo√° t·ªáp n·∫øu c·∫ßn, AssetWriter kh√¥ng ghi ƒë√® l√™n 1 file ƒë√£ c√≥
                 */
                
                let fileManager = FileManager()
                if let outputPath: String = self.outputURL.path, fileManager.fileExists(atPath: outputPath) {
                    try fileManager.removeItem(at: self.outputURL)
                }
                
                // Start reading/writing.
                
                guard assetReader.startReading() else {
                    // `error` is non-nil when startReading returns false.
                    throw assetReader.error!
                }
                
                guard assetWriter.startWriting() else {
                    // `error` is non-nil when startWriting returns false.
                    throw assetWriter.error!
                }
                
                assetWriter.startSession(atSourceTime: kCMTimeZero)
                
            }
            catch {
                self.finish(result: .failure(error))
                return
            }
            
            let writingGroup = DispatchGroup()
            
            // Truy·ªÅn d·ªØ li·ªáu t·∫≠p tin ƒë·∫ßu v√†o sang ƒë·∫ßu ra
            self.transferVideoTracks(videoReaderOutputsAndWriterInputs: videoReaderOutputsAndWriterInputs, group: writingGroup)
            self.transferPassthroughTracks(passthroughReaderOutputsAndWriterInputs: passthroughReaderOutputsAndWriterInputs, group: writingGroup)
            
            // X·ª≠ l√Ω ho√†n th√†nh
            let queue = DispatchQueue.global(priority: DispatchQueue.GlobalQueuePriority.default)
            writingGroup.notify(queue: queue, execute: {
                self.readingAndWritingDidFinish(assetReader: assetReader, assetWriter: assetWriter)
            })
        }
    }
    
    
    func finish(result: Result) {
        self.result = result
    }
    
    
    
    /*
     T·ª± ƒëinh danh 1 ki·ªÉu d·ªØ li·ªáu ri√™ng ƒë·ªÉ c√≥ th·ªÉ s·ª≠ d·ª•ng t∆∞∆°ng ·ª©ng vs 1 'AVAssetWriterInput' c√πng v·ªõi 'AVAssetReaderInput'
     */
    fileprivate typealias ReaderOutputAndWriterInput = (readerOutput: AVAssetReaderOutput, writerInput: AVAssetWriterInput)
    
    //MARK: Chuy·ªÉn ho√° ƒë·∫ßu ra cho ReaderOutputTrack
    private func makeReaderOutputsForTracks(tracks : [AVAssetTrack] , availableMediaTypes : [String] ) throws ->
        (videoReaderOutputs : [AVAssetReaderTrackOutput] , passthroughReaderOutputs : [AVAssetReaderTrackOutput] ) {
            // gi·∫£i n√©n video th√†nh source 32ARGB
            let videoDecompressionSettings : [String : Any] = [kCVPixelBufferPixelFormatTypeKey as String : NSNumber(value: kCVPixelFormatType_32ARGB),
                                                               String(kCVPixelBufferIOSurfacePropertiesKey) : [:]] // c√≥ th·ªÉ th√™m c√°c thu·ªôc t√≠nh width , height video khi xu·∫•t ra
            
            // Ph√¢n v√πng theo d√µi c√°c track "video" vs "passthrough", t·∫°o output cho Reader
            
            var videoReaderOutputs = [AVAssetReaderTrackOutput]()
            var passthroughReaderOutputs = [AVAssetReaderTrackOutput]()
            
            for track in tracks {
                guard availableMediaTypes.contains(track.mediaType) else { continue }
                
                switch track.mediaType {
                case AVMediaTypeVideo:
                    let videoReaderOutput = AVAssetReaderTrackOutput(track: track, outputSettings: videoDecompressionSettings)
                    videoReaderOutputs += [videoReaderOutput] // cong them mang
                default:
                    // nil output ->> passthrough
                    let passthroughReaderOutput = AVAssetReaderTrackOutput(track: track, outputSettings: nil)
                    passthroughReaderOutputs += [passthroughReaderOutput]
                }
            }
            
            return (videoReaderOutputs, passthroughReaderOutputs)
    }
    
    //MARK: L·∫•y AVAssetReaderTrackOutput ---> ReaderOutputAndWriterInput
    private func makeVideoWriterInputsForVideoReaderOutputs(videoReaderOutputs: [AVAssetReaderTrackOutput])  throws -> [ReaderOutputAndWriterInput] {
        // N√©n source frame ƒë√£ ƒë·ªïi th√†nh H.264
        let videoCompressionSettings : [String: Any] = [AVVideoCodecKey : AVVideoCodecH264]
        /*
         In order to find the source format we need to create a temporary asset
         reader, plus a temporary track output for each "real" track output.
         We will only read as many samples (typically just one) as necessary
         to discover the format of the buffers that will be read from each "real"
         track output.
         
         ƒê·ªÉ t√¨m d·∫°ng ƒë·ªãnh d·∫°ng ngu·ªìn, ch√∫ng ta c·∫ßn ph·∫£i t·∫°o ra 1 asserReader t·∫°m th·ªùi, c·ªông vs 1 kq theo d√µi t·∫°m th·ªùi cho m√¥i
         ƒë·∫ßu ra theo th·ªùi gian th·ª±c.
         */
        
        let tempAssetReader = try AVAssetReader(asset: asset)
        
        let videoReaderOutputsAndTempVideoReaderOutputs: [(videoReaderOutput: AVAssetReaderTrackOutput, tempVideoReaderOutput: AVAssetReaderTrackOutput)] = videoReaderOutputs.map { videoReaderOutput in
            let tempVideoReaderOutput = AVAssetReaderTrackOutput(track: videoReaderOutput.track, outputSettings: videoReaderOutput.outputSettings)
            
            tempAssetReader.add(tempVideoReaderOutput)
            
            return (videoReaderOutput, tempVideoReaderOutput)
        }
        
        // Start Reading
        
        guard tempAssetReader.startReading() else {
            // error khi start fail
            print("üî¥", "Don't start")
            throw tempAssetReader.error!
        }
        
        // T·∫°o video AssetWriter input , b·∫±ng c√°c source ƒë·∫ßu ra c·ªßa reader t·∫°m th·ªùi
        var videoReaderOutputsAndWriterInputs = [ReaderOutputAndWriterInput]()
        
        for (videoReaderOutput, tempVideoReaderOutput) in videoReaderOutputsAndTempVideoReaderOutputs {
            // l·∫•y ƒëinh d·∫°ng source b·ªô ƒë·ªám m·∫´u
            
            var videoFormatHint: CMFormatDescription?
            
            while videoFormatHint == nil {
                guard let sampleBuffer = tempVideoReaderOutput.copyNextSampleBuffer() else {
                    // ra kh·ªèi b·ªô nh·ªõ ƒë·ªám m·∫´u tr∆∞·ªõc khi t√¨m th·∫•y 1 m√¥ t·∫£ ƒë·ªãnh d·∫°ng
                    throw CyanifyError.noMediaData
                }
                
                videoFormatHint = CMSampleBufferGetFormatDescription(sampleBuffer)
            }
            
            // Create asset writer input.
            let videoWriterInput = AVAssetWriterInput(mediaType: AVMediaTypeVideo, outputSettings: videoCompressionSettings, sourceFormatHint: videoFormatHint)
            
            videoReaderOutputsAndWriterInputs.append((readerOutput: videoReaderOutput, writerInput: videoWriterInput))
        }
        
        // ƒê√≥ng c√°c ti·∫øn tr√¨nh x·ª≠ l√Ω, v√¨ ch·ªâ ƒë·ªçc 1 t·∫≠p con c·ªßa c√°c m·∫´u
        tempAssetReader.cancelReading()
        
        return videoReaderOutputsAndWriterInputs
        
    }
    
    //MARK: AVAssetReaderTrackOutput ---> [ReaderOutputAndWriterInput]
    private func makePassthroughWriterInputsForPassthroughReaderOutputs(passthroughReaderOutputs : [AVAssetReaderTrackOutput]) throws -> [ReaderOutputAndWriterInput] {
        // T·∫°o c√°c ƒë·∫ßu v√†o c·ªßa WriterInputs, s·ª≠ d·ª•ng source track's theo WriterInput
        
        var passthroughReaderOutputsAndWriterInputs = [ReaderOutputAndWriterInput]()
        
        for passthroughReaderOutput in passthroughReaderOutputs {
            /*
             For passthrough, we can simply ask the track for its format
             description and use that as the writer input's format hint.
             -> ƒê·ªëi v·ªõi passthrough, y√™u c·∫ßu theo d√µi ƒë·ªÉ m√¥ t·∫£ ƒë·ªãnh d·∫°ng vs s·ª≠ d·ª•ng Writer Input fomat
             */
            
            let trackFormatDescriptions = passthroughReaderOutput.track.formatDescriptions as! [CMFormatDescription]
            
            guard let passthroughFormatHint = trackFormatDescriptions.first else {
                throw CyanifyError.noMediaData
            }
            
            //T·∫°o AssetWriterInput v·ªõi nil (passthrough) output setting
            let passthroughWriterInput = AVAssetWriterInput(mediaType: passthroughReaderOutput.mediaType, outputSettings: nil, sourceFormatHint: passthroughFormatHint)
            
            passthroughReaderOutputsAndWriterInputs.append((readerOutput: passthroughReaderOutput, writerInput: passthroughWriterInput))
        }
        
        return passthroughReaderOutputsAndWriterInputs
    }
    
    //MARK: append view l√™n video
    private func transferVideoTracks(videoReaderOutputsAndWriterInputs: [ReaderOutputAndWriterInput], group : DispatchGroup) {
        for (videoReaderOutput, videoWriterInput) in videoReaderOutputsAndWriterInputs {
            let perTrackDispatchQueue = DispatchQueue(label: "Track data transfer queue: \(videoReaderOutput) -> \(videoWriterInput).", attributes: [])
            // t·∫°o 1 block ƒë·ªÉ thay ƒë·ªïi m√†u tr√™n m·ªói frame
            
            let videoProcessor: (CMSampleBuffer) throws -> Void = { sampleBuffer in
                if let imageBuffer = CMSampleBufferGetImageBuffer(sampleBuffer),
                    let pixelBuffer: CVPixelBuffer = imageBuffer, CFGetTypeID(imageBuffer) == CVPixelBufferGetTypeID() {
                    
                    let redComponentIndex = 1
                    try pixelBuffer.removeARGBColorComponentAtIndex(componentIndex: redComponentIndex)
                }
            }
            
            group.enter()
            transferSamplesAsynchronouslyFromReaderOutput(videoReaderOutput,
                                                          toWriterInput: videoWriterInput,
                                                          onQueue: perTrackDispatchQueue,
                                                          sampleBufferProcessor: videoProcessor) {
                                                            group.leave()
            }
            
        }
    }
    
    //MARK: Truy·ªÅn Track qua ReadOutput - WriterInput:
    private func transferPassthroughTracks(passthroughReaderOutputsAndWriterInputs : [ReaderOutputAndWriterInput], group : DispatchGroup) {
        
        for (passthroughReaderOutput, passthroughWriterInput) in passthroughReaderOutputsAndWriterInputs {
            let perTrackDispatchQueue = DispatchQueue(label: "Track data transfer queue: \(passthroughReaderOutput) -> \(passthroughWriterInput).", attributes: [])
            
            group.enter()
            transferSamplesAsynchronouslyFromReaderOutput(passthroughReaderOutput,
                                                          toWriterInput: passthroughWriterInput,
                                                          onQueue: perTrackDispatchQueue) {
                                                          group.leave()
            }
        }
    }
    
    
    //MARK: Truy·ªÅn Samples Buffer Pixel kh√¥ng ƒë·ªìng b·ªô t·ª´ ReaderOutput --> WriterInput
    private func transferSamplesAsynchronouslyFromReaderOutput(_ readerOutput: AVAssetReaderOutput,
                                                               toWriterInput writerInput: AVAssetWriterInput,
                                                               onQueue queue: DispatchQueue,
                                                               sampleBufferProcessor: ((_ sampleBuffer: CMSampleBuffer) throws -> Void)? = nil, completionHandler: @escaping (Void) -> Void) {
        // Cung c·∫•p ƒë·∫ßu v√†o AssetWriterInput c√πng v·ªõi 1 block call b·∫•t k√¨ l√∫c n√†o c·∫ßn samples
          writerInput.requestMediaDataWhenReady(on: queue) {
            var isDone = false
            /*
             Loop, transferring one sample per iteration, until the asset writer
             input has enough samples. At that point, exit the callback block
             and the asset writer input will invoke the block again when it
             needs more samples.
             
             Chuy·ªÉn 1 sample m·ªói 1 l·∫ßn l·∫∑p cho ƒë·∫øn khi AssetWriterInput c√≥ ƒë·ªß samples
             T·∫°i th·ªùi ƒëi·ªÉm ƒë√≥, tho√°t kh·ªèi block v√† AssetWriterInput s·∫Ω g·ªçi l·∫°i block khi n√≥ c·∫ßn th√™m nhi·ªÅu sample h∆°n
             */
            
            while writerInput.isReadyForMoreMediaData {
                guard !self.isCancelled else {
                    isDone = true
                    break
                }
            }
            
            // L·∫•y sample ti·∫øp theo t·ª´ AssetReaderOutput
             guard let sampleBuffer = readerOutput.copyNextSampleBuffer() else {
                //  T·∫°i th·ªùi ƒëi·ªÉm n√†y, AssetReaderOutput kh√¥ng c√≥ sample ƒë·ªÉ chuy·ªÉn ƒë·ªïi n·ªØa
                isDone = true
                break
             }
            
            // X·ª≠ l√Ω sample, n·∫øu ƒë∆∞·ª£c y√™u c·∫ßu
            do {
                try sampleBufferProcessor?(sampleBuffer)
            }
            catch {
                // L·ªói n√†y s·∫Ω ƒë∆∞·ª£c th·∫•y trong readingAndWritingDidFinish
                self.sampleTransferError = error
                isDone = true
            }
            
            // Append the sample to the asset writer input. -- N·ªëi c√°c sample v√†o trong AssetWriterInput
            guard writerInput.append(sampleBuffer) else {
                // L·ªói n·∫øu kh√¥ng th√™m ƒë∆∞·ª£c sampleBuffer hi·ªÉn th·ªã trong ReadAndWritingDidFinish
                isDone = true
                break
            }
            
            if isDone {
                /*
                 Calling `markAsFinished()` on the asset writer input will both:
                 1. Unblock any other inputs that need more samples.
                 2. Cancel further invocations of this "request media data"
                 callback block.
                 
                 G·ªçi markAsFinished ƒë·ªÉ b·∫Øt ƒë·∫ßu tr√¨nh ghi v√†o AssetWriterInput :
                 1. b·ªè ch·∫∑n b·∫•t k√¨ ƒë·∫ßu v√†o n√†o kh√°c c·∫ßn th√™m sample
                 2. hu·ª∑ c√°c l·ªánh g·ªçi th√™m block "request media data" n√†y
                 */
                
                writerInput.markAsFinished()
                
                // Block ƒë√£ th·ª±c hi·ªán chuy·ªÉn d·ªØ li·ªáu
                completionHandler()
            }
        }
    }
    
    
    //MARK: Reading - Writing ho√†n th√†nh
    private func readingAndWritingDidFinish (assetReader : AVAssetReader , assetWriter : AVAssetWriter) {
        if isCancelled {
            assetReader.cancelReading()
            assetWriter.cancelWriting()
        }
        
        // X·ª≠ l√Ω b·∫•t k√¨ l·ªói n√†o trong qu√° tr√¨nh render video
        guard sampleTransferError == nil else {
            assetReader.cancelReading()
            assetWriter.cancelWriting()
            finish(result: .failure(sampleTransferError!))
            return
        }
        
        // ƒê√°nh gi√° result c·ªßa vi·ªác reader sample
        guard assetReader.status == .completed else {
            let result: Result
            
            switch assetReader.status {
            case .cancelled:
                assetWriter.cancelWriting()
                result = .cancellation
                
            case .failed:
                // `error` property is non-nil in the `.Failed` status.
                result = .failure(assetReader.error!)
                
            default:
                fatalError("Unexpected terminal asset reader status: \(assetReader.status).")
            }
            
            finish(result: result)
            
            return
        }
        
        
        // Finish writing kh√¥ng ƒë·ªìng b·ªô ƒë√°nh gi√° result writing sample
        assetWriter.finishWriting {
            let result: Result
            
            switch assetWriter.status {
            case .completed:
                result = .success
                
            case .cancelled:
                result = .cancellation
                
            case .failed:
                // `error` property is non-nil in the `.Failed` status.
                result = .failure(assetWriter.error!)
                
            default:
                fatalError("Unexpected terminal asset writer status: \(assetWriter.status).")
            }
            
            self.finish(result: result)
        }
    }
}

extension CVPixelBuffer {
    /**
     Iterates through each pixel in the receiver (assumed to be in ARGB format)
     and overwrites the color component at the given index with a zero. This
     has the effect of "cyanifying," "rosifying," etc (depending on the chosen
     color component) the overall image represented by the pixel buffer.
     */
    func removeARGBColorComponentAtIndex(componentIndex: size_t) throws {
        let lockBaseAddressResult = CVPixelBufferLockBaseAddress(self, CVPixelBufferLockFlags(rawValue: CVOptionFlags(0)))
        
        guard lockBaseAddressResult == kCVReturnSuccess else {
            throw NSError(domain: NSOSStatusErrorDomain, code: Int(lockBaseAddressResult), userInfo: nil)
        }
        
        let bufferHeight = CVPixelBufferGetHeight(self)
        
        let bufferWidth = CVPixelBufferGetWidth(self)
        
        let bytesPerRow = CVPixelBufferGetBytesPerRow(self)
        
        let bytesPerPixel = bytesPerRow / bufferWidth
        
        if let baseAddress = CVPixelBufferGetBaseAddress(self) {
            let base = baseAddress.assumingMemoryBound(to: UInt8.self)
            // `buf` is `UnsafeMutablePointer<UInt8>`
            // For each pixel, zero out selected color component.
            for row in 0..<bufferHeight {
                for column in 0..<bufferWidth {
                    let pixel = base + (row * bytesPerRow) + (column * bytesPerPixel)
                    pixel[componentIndex] = 0
                }
            }
            
            let unlockBaseAddressResult = CVPixelBufferUnlockBaseAddress(self, CVPixelBufferLockFlags(rawValue: CVOptionFlags(0)))
            
            guard unlockBaseAddressResult == kCVReturnSuccess else {
                throw NSError(domain: NSOSStatusErrorDomain, code: Int(unlockBaseAddressResult), userInfo: nil)
            }
            
        }
        
        
    }
}

